# -*- mode: c++; tab-width: 4; indent-tabs-mode: t; eval: (progn (c-set-style "stroustrup") (c-set-offset 'innamespace 0)); -*-
# vi:set ts=4 sts=4 sw=4 noet :
# Copyright 2014, The TPIE development team
#
# This file is part of TPIE.
#
# TPIE is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# TPIE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TPIE.  If not, see <http://www.gnu.org/licenses/>

import sys
p = sys.stdout.write

# Until variadic templates are supported everywhere,
# this redefinition of infinity will suffice.
infinity = 6

def header():
	print("// This file was generated by gen_factory_helpers_inl.py, do not edit\n")

def gen(types, terminal, templated, move):
	indices = range(1, 1+types)

	cl = "%s%sfactory_%s" % (
			"term" if terminal else "",
			"temp" if templated else "",
			str(types))

	print("""%s
/// \class %s
/// Node factory for %s-argument %s%s.
%s""" % ("/"*79,
		cl,
		str(types),
		"templated " if templated else "",
		"terminator" if terminal else "generator",
		"/"*79))

	if templated:
		generator_template = "typename Holder::template type"
		if terminal:
			tparams = "template <typename Holder%s>"
			generator = "typename Holder::type"
		else:
			tparams = "template <typename Holder%s>"
			generator = "%s<dest_t>" % generator_template
	else:
		generator_template = "R"
		if terminal:
			tparams = "template <typename R%s>"
			generator = "R"
		else:
			# `typename` not permitted as a substitute for `class` here
			tparams = "template <template <typename dest_t> class R%s>"
			generator = "R<dest_t>"

	print(tparams % (''.join(', typename T%s' % x for x in indices)))

	print("class %s : public factory_base {" % cl)
	print("public:")
	if terminal:
		print("\ttypedef %s constructed_type;\n" % generator)
	else:
		print("""\ttemplate<typename dest_t>
	struct constructed {
		typedef %s<typename bits::remove<dest_t>::type> type;
	};
""" % generator_template)

	if types > 0:
		print("\t%s(%s)" % (
				cl,
				", ".join("T%s t%s" % (x, x) for x in indices)))
		print("\t\t: %s {}\n" % (
				", ".join("t%s(t%s)" % (x, x) for x in indices)))

	if terminal:
		print("\t%s construct() const {" % generator)
		if types:
			print("\t\t%s r(%s);" % (
					generator,
					", ".join("t%d" % x for x in indices)))
		else:
			print("\t\t%s r;" % generator)
		print("\t\tthis->init_node(r);")
		print("\t\treturn r;")
		print("\t}")
	else:
		print("\ttemplate <typename dest_t>")
		return_type = "typename constructed<dest_t>::type"
		if move:
			print("\t%s" % return_type)
			print("\tconstruct(dest_t && dest) const {")
			print("\t\tnode_token tok = dest.get_token();")
			print("\t\t%s" % return_type)
			print("\t\t\tr(std::forward<dest_t>(dest)%s);" % (
					"".join(", t%d" % x for x in indices)))
			print("\t\tthis->init_node(r);")
			print("\t\tthis->add_default_edge(r, tok);")
		else:
			print("\t%s" % return_type)
			print("\tconstruct(const dest_t & dest) const {")
			print("\t\t%s r(dest%s);" % (
					generator,
					"".join(", t%d" % x for x in indices)))
			print("\t\tthis->init_node(r);")
			print("\t\tthis->add_default_edge(r, dest);")
		print("\t\treturn r;")
		print("\t}")

	if indices:
		print("\nprivate:")
		for x in indices:
			print("\tT%s t%s;" % (x,x))

	print("};\n")

if __name__ == "__main__":
	header()
	xs = range(0, infinity+1)
	print("#ifdef TPIE_CPP_RVALUE_REFERENCE\n")
	for x in xs:
		gen(types=x, terminal=False, templated=False, move=True)
		gen(types=x, terminal=False, templated=True, move=True)
	print("#else // TPIE_CPP_RVALUE_REFERENCE\n")
	for x in xs:
		gen(types=x, terminal=False, templated=False, move=False)
		gen(types=x, terminal=False, templated=True, move=False)
	print("#endif // TPIE_CPP_RVALUE_REFERENCE\n")
	for x in xs:
		gen(types=x, terminal=True, templated=False, move=False)
		#gen(types=x, terminal=True, templated=True, move=False)
		# a templated terminal factory does not make sense
